// Generated by Dagger (https://dagger.dev).
package com.gibeom.ofriendsmobile.di;

import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.gibeom.ofriendsmobile.MainActivity;
import com.gibeom.ofriendsmobile.MainActivity_MembersInjector;
import com.gibeom.ofriendsmobile.OfriendsApp;
import com.gibeom.ofriendsmobile.OfriendsApp_MembersInjector;
import com.gibeom.ofriendsmobile.data.local.AppDatabase;
import com.gibeom.ofriendsmobile.data.local.OfriendsDao;
import com.gibeom.ofriendsmobile.data.remote.OfriendsService;
import com.gibeom.ofriendsmobile.data.remote.ProductDetailRemoteDataSource;
import com.gibeom.ofriendsmobile.data.remote.ProductDetailRemoteDataSource_Factory;
import com.gibeom.ofriendsmobile.data.remote.ProductListRemoteDataSource;
import com.gibeom.ofriendsmobile.data.remote.ProductListRemoteDataSource_Factory;
import com.gibeom.ofriendsmobile.home.ui.HomeFragment;
import com.gibeom.ofriendsmobile.home.ui.HomeFragment_MembersInjector;
import com.gibeom.ofriendsmobile.home.ui.HomeViewModel;
import com.gibeom.ofriendsmobile.home.ui.HomeViewModel_Factory;
import com.gibeom.ofriendsmobile.like.ui.LikeFragment;
import com.gibeom.ofriendsmobile.like.ui.LikeFragment_MembersInjector;
import com.gibeom.ofriendsmobile.like.ui.LikeViewModel;
import com.gibeom.ofriendsmobile.like.ui.LikeViewModel_Factory;
import com.gibeom.ofriendsmobile.more.ui.MoreFragment;
import com.gibeom.ofriendsmobile.productdetail.ui.ProductDetailFragment;
import com.gibeom.ofriendsmobile.productdetail.ui.ProductDetailFragment_MembersInjector;
import com.gibeom.ofriendsmobile.productdetail.ui.ProductDetailViewModel;
import com.gibeom.ofriendsmobile.productdetail.ui.ProductDetailViewModel_Factory;
import com.gibeom.ofriendsmobile.promo.data.PromoViewModel;
import com.gibeom.ofriendsmobile.promo.data.PromoViewModel_Factory;
import com.gibeom.ofriendsmobile.promo.ui.PromoFragment;
import com.gibeom.ofriendsmobile.promo.ui.PromoFragment_MembersInjector;
import com.gibeom.ofriendsmobile.repository.ProductDetailRepository;
import com.gibeom.ofriendsmobile.repository.ProductDetailRepository_Factory;
import com.gibeom.ofriendsmobile.repository.ProductListRepository;
import com.gibeom.ofriendsmobile.repository.ProductListRepository_Factory;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<OfriendsService> provideOfriendsServiceProvider;

  private Provider<ProductListRemoteDataSource> productListRemoteDataSourceProvider;

  private Provider<Application> applicationProvider;

  private Provider<AppDatabase> provideDatabaseProvider;

  private Provider<OfriendsDao> provideOfriendsDaoProvider;

  private Provider<ProductListRepository> productListRepositoryProvider;

  private Provider<CoroutineScope> provideCoroutineScopeIOProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<PromoViewModel> promoViewModelProvider;

  private Provider<ProductDetailRemoteDataSource> productDetailRemoteDataSourceProvider;

  private Provider<ProductDetailRepository> productDetailRepositoryProvider;

  private Provider<ProductDetailViewModel> productDetailViewModelProvider;

  private Provider<LikeViewModel> likeViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.provideLoggingInterceptorProvider = AppModule_ProvideLoggingInterceptorFactory.create(appModuleParam);
    this.provideOkHttpClientProvider = AppModule_ProvideOkHttpClientFactory.create(appModuleParam, provideLoggingInterceptorProvider);
    this.provideGsonProvider = DoubleCheck.provider(AppModule_ProvideGsonFactory.create(appModuleParam));
    this.provideGsonConverterFactoryProvider = DoubleCheck.provider(AppModule_ProvideGsonConverterFactoryFactory.create(appModuleParam, provideGsonProvider));
    this.provideOfriendsServiceProvider = DoubleCheck.provider(AppModule_ProvideOfriendsServiceFactory.create(appModuleParam, provideOkHttpClientProvider, provideGsonConverterFactoryProvider));
    this.productListRemoteDataSourceProvider = ProductListRemoteDataSource_Factory.create(provideOfriendsServiceProvider);
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideDatabaseProvider = DoubleCheck.provider(AppModule_ProvideDatabaseFactory.create(appModuleParam, applicationProvider));
    this.provideOfriendsDaoProvider = DoubleCheck.provider(AppModule_ProvideOfriendsDaoFactory.create(appModuleParam, provideDatabaseProvider));
    this.productListRepositoryProvider = ProductListRepository_Factory.create(productListRemoteDataSourceProvider, provideOfriendsDaoProvider);
    this.provideCoroutineScopeIOProvider = AppModule_ProvideCoroutineScopeIOFactory.create(appModuleParam);
    this.homeViewModelProvider = HomeViewModel_Factory.create(productListRepositoryProvider, applicationProvider, provideCoroutineScopeIOProvider);
    this.promoViewModelProvider = PromoViewModel_Factory.create(productListRepositoryProvider, provideCoroutineScopeIOProvider);
    this.productDetailRemoteDataSourceProvider = ProductDetailRemoteDataSource_Factory.create(provideOfriendsServiceProvider);
    this.productDetailRepositoryProvider = ProductDetailRepository_Factory.create(productDetailRemoteDataSourceProvider);
    this.productDetailViewModelProvider = ProductDetailViewModel_Factory.create(productDetailRepositoryProvider);
    this.likeViewModelProvider = LikeViewModel_Factory.create(productListRepositoryProvider, provideCoroutineScopeIOProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4).put(HomeViewModel.class, (Provider) homeViewModelProvider).put(PromoViewModel.class, (Provider) promoViewModelProvider).put(ProductDetailViewModel.class, (Provider) productDetailViewModelProvider).put(LikeViewModel.class, (Provider) likeViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(OfriendsApp application) {
    injectOfriendsApp(application);}

  private OfriendsApp injectOfriendsApp(OfriendsApp instance) {
    OfriendsApp_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent.Factory> likeFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent.Factory> moreFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent.Factory> promoFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent.Factory> productDetailFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(6).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(LikeFragment.class, (Provider) likeFragmentSubcomponentFactoryProvider).put(MoreFragment.class, (Provider) moreFragmentSubcomponentFactoryProvider).put(PromoFragment.class, (Provider) promoFragmentSubcomponentFactoryProvider).put(ProductDetailFragment.class, (Provider) productDetailFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory get(
            ) {
          return new HomeFragmentSubcomponentFactory();}
      };
      this.likeFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent.Factory get(
            ) {
          return new LikeFragmentSubcomponentFactory();}
      };
      this.moreFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent.Factory get(
            ) {
          return new MoreFragmentSubcomponentFactory();}
      };
      this.promoFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent.Factory get(
            ) {
          return new PromoFragmentSubcomponentFactory();}
      };
      this.productDetailFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent.Factory get(
            ) {
          return new ProductDetailFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent create(
          HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);}

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        HomeFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class LikeFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent create(
          LikeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LikeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LikeFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLikeFragment.LikeFragmentSubcomponent {
      private LikeFragmentSubcomponentImpl(LikeFragment arg0) {

      }

      @Override
      public void inject(LikeFragment arg0) {
        injectLikeFragment(arg0);}

      private LikeFragment injectLikeFragment(LikeFragment instance) {
        LikeFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class MoreFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent create(
          MoreFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new MoreFragmentSubcomponentImpl(arg0);
      }
    }

    private final class MoreFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeMoreFragment.MoreFragmentSubcomponent {
      private MoreFragmentSubcomponentImpl(MoreFragment arg0) {

      }

      @Override
      public void inject(MoreFragment arg0) {
      }
    }

    private final class PromoFragmentSubcomponentFactory implements FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent create(
          PromoFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new PromoFragmentSubcomponentImpl(arg0);
      }
    }

    private final class PromoFragmentSubcomponentImpl implements FragmentBuildersModule_ContributePromoFragment.PromoFragmentSubcomponent {
      private PromoFragmentSubcomponentImpl(PromoFragment arg0) {

      }

      @Override
      public void inject(PromoFragment arg0) {
        injectPromoFragment(arg0);}

      private PromoFragment injectPromoFragment(PromoFragment instance) {
        PromoFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ProductDetailFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent create(
          ProductDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ProductDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ProductDetailFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeProductDetailFragment.ProductDetailFragmentSubcomponent {
      private ProductDetailFragmentSubcomponentImpl(ProductDetailFragment arg0) {

      }

      @Override
      public void inject(ProductDetailFragment arg0) {
        injectProductDetailFragment(arg0);}

      private ProductDetailFragment injectProductDetailFragment(ProductDetailFragment instance) {
        ProductDetailFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
